using System;
using System.Collections.Generic;

namespace Mane.Sap.ServiceLayer.Interfaces
{
   public interface IDocumentLineSap
    {
        string AccountCode { get; set; }
        int ActualBaseEntry { get; set; }
        int ActualBaseLine { get; set; }
        DateTime ActualDeliveryDate { get; set; }
        string Address { get; set; }
        int AgreementNo { get; set; }
        int AgreementRowNumber { get; set; }
        double AppliedTax { get; set; }
        double AppliedTaxFC { get; set; }
        double AppliedTaxSC { get; set; }
        BoYesNoEnum BackOrder { get; set; }
        string BarCode { get; set; }
        int BaseEntry { get; set; }
        int BaseLine { get; set; }
        double BaseOpenQuantity { get; set; }
        int BaseType { get; set; }
        List<IBatchNumbersSap> BatchNumbers { get; set; }
        List<ICCDNumbersSap> CCDNumbers { get; set; }
        int CESTCode { get; set; }
        string CFOPCode { get; set; }
        string ChangeAssemlyBoMWarehouse { get; set; }
        BoYesNoEnum ChangeInventoryQuantityIndependently { get; set; }
        string CNJPMan { get; set; }
        string COGSAccountCode { get; set; }
        string COGSCostingCode { get; set; }
        string COGSCostingCode2 { get; set; }
        string COGSCostingCode3 { get; set; }
        string COGSCostingCode4 { get; set; }
        string COGSCostingCode5 { get; set; }
        double CommisionPercent { get; set; }
        int CommodityClassification { get; set; }
        BoYesNoEnum ConsiderQuantity { get; set; }
        BoYesNoEnum ConsumerSalesForecast { get; set; }
        BoCorInvItemStatus CorrectionInvoiceItem { get; set; }
        double CorrInvAmountToDiffAcct { get; set; }
        double CorrInvAmountToStock { get; set; }
        string CostingCode { get; set; }
        string CostingCode2 { get; set; }
        string CostingCode3 { get; set; }
        string CostingCode4 { get; set; }
        string CostingCode5 { get; set; }
        string CountryOrg { get; set; }
        string CreditOriginCode { get; set; }
        string CSTCode { get; set; }
        string CSTforCOFINS { get; set; }
        string CSTforIPI { get; set; }
        string CSTforPIS { get; set; }
        double CtrSealQty { get; set; }
        string Currency { get; set; }
        BoYesNoEnum CUSplit { get; set; }
        double DefectAndBreakup { get; set; }
        BoYesNoEnum DeferredTax { get; set; }
        string DestinationCountryForImport { get; set; }
        int DestinationRegionForImport { get; set; }
        double DiscountPercent { get; set; }
        BoYesNoEnum DistributeExpense { get; set; }
        int DocEntry { get; set; }
        List<IDocument_LinesAdditionalExpensesSap> DocumentLineAdditionalExpenses { get; set; }
        List<object> DocumentLinesBinAllocations { get; set; }
        IEBooks_Doc_DetailsSap EBooksDetails { get; set; }
        double EqualizationTaxPercent { get; set; }
        double ExciseAmount { get; set; }
        string ExLineNo { get; set; }
        BoExpenseOperationTypeEnum ExpenseOperationType { get; set; }
        string ExpenseType { get; set; }
        double Factor1 { get; set; }
        double Factor2 { get; set; }
        double Factor3 { get; set; }
        double Factor4 { get; set; }
        string FederalTaxID { get; set; }
        BoYesNoEnum FreeOfChargeBP { get; set; }
        string FreeText { get; set; }
        IGeneratedAssetsSap GeneratedAssets { get; set; }
        int GrossBase { get; set; }
        double GrossBuyPrice { get; set; }
        double GrossPrice { get; set; }
        double GrossProfit { get; set; }
        double GrossProfitFC { get; set; }
        double GrossProfitSC { get; set; }
        double GrossProfitTotalBasePrice { get; set; }
        double GrossTotal { get; set; }
        double GrossTotalFC { get; set; }
        double GrossTotalSC { get; set; }
        double Height1 { get; set; }
        double Height2 { get; set; }
        int Height2Unit { get; set; }
        int Hight1Unit { get; set; }
        int HSNEntry { get; set; }
        IImportProcessesSap ImportProcesses { get; set; }
        int Incoterms { get; set; }
        BoYesNoEnum IndicatorForRelevantScale { get; set; }
        double InventoryQuantity { get; set; }
        string ItemCode { get; set; }
        string ItemDescription { get; set; }
        string ItemDetails { get; set; }
        BoDocItemType ItemType { get; set; }
        double LastBuyDistributeSum { get; set; }
        double LastBuyDistributeSumFc { get; set; }
        double LastBuyDistributeSumSc { get; set; }
        double LastBuyInmPrice { get; set; }
        double Lengh1 { get; set; }
        int Lengh1Unit { get; set; }
        double Lengh2 { get; set; }
        int Lengh2Unit { get; set; }
        int LineNum { get; set; }
        BoStatus LineStatus { get; set; }
        List<ITaxJurisdictionsSap> LineTaxJurisdictions { get; set; }
        double LineTotal { get; set; }
        BoDocLineType LineType { get; set; }
        int LocationCode { get; set; }
        string MeasureUnit { get; set; }
        int NatureOfTransaction { get; set; }
        int NCMCode { get; set; }
        double NetTaxAmount { get; set; }
        double NetTaxAmountFC { get; set; }
        double NetTaxAmountSC { get; set; }
        string NVECode { get; set; }
        double OpenAmount { get; set; }
        double OpenAmountFC { get; set; }
        double OpenAmountSC { get; set; }
        string OriginalItem { get; set; }
        string OriginCountryForExport { get; set; }
        int OriginRegionForExport { get; set; }
        double PackageQuantity { get; set; }
        int ParentLineNum { get; set; }
        BoYesNoEnum PartialRetirement { get; set; }
        int PickListIdNumber { get; set; }
        double PickQuantity { get; set; }
        BoYesNoEnum PickStatus { get; set; }
        BoDocumentLinePickStatus PickStatusEx { get; set; }
        int PoItemNum { get; set; }
        string PoNum { get; set; }
        string POTargetEntry { get; set; }
        int POTargetNum { get; set; }
        string POTargetRowNum { get; set; }
        double Price { get; set; }
        double PriceAfterVAT { get; set; }
       // string PriceSource { get; set; }
        string ProjectCode { get; set; }
        double Quantity { get; set; }
        double Rate { get; set; }
        string ReceiptNumber { get; set; }
        double RemainingOpenInventoryQuantity { get; set; }
        double RemainingOpenQuantity { get; set; }
        DateTime RequiredDate { get; set; }
        double RequiredQuantity { get; set; }
        double RetirementAPC { get; set; }
        double RetirementQuantity { get; set; }
        BoYesNoEnum ReverseCharge { get; set; }
        double RowTotalFC { get; set; }
        double RowTotalSC { get; set; }
        int SACEntry { get; set; }
        int SalesPersonCode { get; set; }
        string SerialNum { get; set; }
        List<ISerialNumbersSap> SerialNumbers { get; set; }
        DateTime ShipDate { get; set; }
        string ShipFromCode { get; set; }
        string ShipFromDescription { get; set; }
        int ShippingMethod { get; set; }
        double Shortages { get; set; }
        int StandardItemIdentification { get; set; }
        string StgDesc { get; set; }
        int StgEntry { get; set; }
        int StgSeqNum { get; set; }
        double StockDistributesum { get; set; }
        double StockDistributesumForeign { get; set; }
        double StockDistributesumSystem { get; set; }
        double StockInmPrice { get; set; }
        string SupplierCatNum { get; set; }
        double Surpluses { get; set; }
        string SWW { get; set; }
        double TaxBeforeDPM { get; set; }
        double TaxBeforeDPMFC { get; set; }
        double TaxBeforeDPMSC { get; set; }
        string TaxCode { get; set; }
        BoYesNoEnum TaxLiable { get; set; }
        BoYesNoEnum TaxOnly { get; set; }
        double TaxPercentagePerRow { get; set; }
        double TaxPerUnit { get; set; }
        double TaxTotal { get; set; }
        BoTaxTypes TaxType { get; set; }
        string Text { get; set; }
        BoYesNoEnum ThirdParty { get; set; }
        double TotalEqualizationTax { get; set; }
        double TotalEqualizationTaxFC { get; set; }
        double TotalEqualizationTaxSC { get; set; }
        double TotalInclTax { get; set; }
        BoTransactionTypeEnum TransactionType { get; set; }
        int TransportMode { get; set; }
        BoItemTreeTypes TreeType { get; set; }
        string UFFiscalBenefitCode { get; set; }
        int UnencumberedReason { get; set; }
        double UnitPrice { get; set; }
        double UnitsOfMeasurment { get; set; }
        string UoMCode { get; set; }
        int UoMEntry { get; set; }
        string Usage { get; set; }
        BoYesNoEnum UseBaseUnits { get; set; }
        string VatGroup { get; set; }
        string VendorNum { get; set; }
        int VisualOrder { get; set; }
        double Volume { get; set; }
        int VolumeUnit { get; set; }
        string WarehouseCode { get; set; }
        double Weight1 { get; set; }
        int Weight1Unit { get; set; }
        double Weight2 { get; set; }
        int Weight2Unit { get; set; }
        double Width1 { get; set; }
        int Width1Unit { get; set; }
        double Width2 { get; set; }
        int Width2Unit { get; set; }
        List<IWithholdingTaxLinesSap> WithholdingTaxLines { get; set; }
        BoYesNoEnum WithoutInventoryMovement { get; set; }
        BoYesNoEnum WTLiable { get; set; }
    }
}